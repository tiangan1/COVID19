# -*- coding: utf-8 -*-
"""Covid19_SVA_RANK

Automatically generated by Colaboratory.

"""

import pandas as pd

confirmed = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv')
death = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv')
death

confirmed['county'] = confirmed.Combined_Key.map(lambda x : x.split(',')[0])
death['county'] = death.Combined_Key.map(lambda x : x.split(',')[0])

confirmed = confirmed.iloc[:, 8:]
death = death.iloc[:, 8:]
confirmed.insert(0, 'County', confirmed.county)
death.insert(0, 'County', death.county)
confirmed.drop(columns=['Combined_Key', 'county'], inplace=True)
death.drop(columns=['Combined_Key', 'county'], inplace=True)

confirmed.drop(confirmed.iloc[:, 3:42], inplace=True, axis=1)
death.drop(death.iloc[:, 3:42], inplace=True, axis=1)

confirmed = confirmed.melt(confirmed.columns[0:3])
confirmed

death = death.melt(death.columns[0:4])

death

confirmed.columns = ['County', 'Lat', 'Long_', 'Date', 'Confirmed']
death.columns = ['County', 'Lat', 'Long_', 'Population', 'Date', 'Death']

confirmed

data = pd.merge(confirmed, death, on=['County', 'Lat', 'Long_', 'Date'])
data



import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import warnings
from sklearn.preprocessing import StandardScaler

def nsva_ranking(data_):
  if np.sum(np.sum(data<0))>0:
    print("\n Error: Data must be a nonnegative matrix\n")
    quit()
  u,s,v = np.linalg.svd(data_, full_matrices=False)
  ranking_score=-u[:,0]
  return ranking_score

def n_sva(X):
  if(X<0).all().all():
    print('Check your input data')
    quit()
  u,s,vt = np.linalg.svd(X, full_matrices=False)
  u_0_app = X.dot(vt[0,:].T)/s[0]
  u_idx = np.argsort(u[:,0])
  u_0_app_idx = np.argsort(u_0_app)
  rank_score_0 = -u_0_app[u_0_app_idx]
  rank_score = -u[u_idx,0]
  return u_0_app_idx, u_idx, rank_score_0, rank_score

df=pd.DataFrame()

for date in data.Date.drop_duplicates():
  data1=data[['Confirmed','Population','Death']][data['Date'] == date]
  data2=data[['County', 'Lat', 'Long_', 'Date','Confirmed','Population','Death']][data['Date'] == date]

  normalized_data = StandardScaler().fit_transform(data1)
  normalized_data_df = pd.DataFrame(data = normalized_data, columns = data1.columns, index = data1.index)
  normalized_data2 = normalized_data - np.min(normalized_data)
  normalized_data2_df = pd.DataFrame( data = normalized_data2, columns = data1.columns, index=data1.index)
  u,s,vt = np.linalg.svd(normalized_data2_df, full_matrices=False)
  u_idx = np.argsort(u[:,0])
  date_=data2.iloc[u_idx[0:10],:]
  df=pd.concat([df,date_])

df

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import matplotlib.animation as animation
from IPython.display import HTML

current_date = '6/9/20'
dff = (df[df['Date'].eq(current_date)])
dff

fig, ax = plt.subplots(figsize=(15, 8))
ax.barh(dff['County'], dff['Confirmed'])
ax.barh(dff['County'], dff['Death'])

fig, ax = plt.subplots(figsize=(15, 8))
def draw_barchart(date):
    dff = df[df['Date'].eq(date)][::-1]
    ax.clear()
    ax.barh(dff['County'], dff['Confirmed'])
    dx = dff['Confirmed'].max() / 200
    for i, (value, name) in enumerate(zip(dff['Confirmed'], dff['County'])):
        ax.text(value-dx, i,     name,           size=14, weight=600, ha='right', va='bottom')
        ax.text(value+dx, i,     f'{value:,.0f}',  size=14, ha='left',  va='center')
    # ... polished styles
    ax.text(1, 0.4, date, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)
    ax.text(0, 1.06, 'Population', transform=ax.transAxes, size=12, color='#777777')
    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))
    ax.xaxis.set_ticks_position('top')
    ax.tick_params(axis='x', colors='#777777', labelsize=12)
    ax.set_yticks([])
    ax.margins(0, 0.01)
    ax.grid(which='major', axis='x', linestyle='-')
    ax.set_axisbelow(True)
    ax.text(0, 1.12, 'The most Confirmed cities in the U.S. from 3/1/20 to 6/9/20',
            transform=ax.transAxes, size=24, weight=600, ha='left')
    ax.text(1, 0, 'by @Tuoheng Chen', transform=ax.transAxes, ha='right',
            color='#777777', bbox=dict(facecolor='white', alpha=0.8, edgecolor='white'))
    plt.box(False)
    
draw_barchart(current_date)

fig, ax = plt.subplots(figsize=(15, 8))
def draw_barchart(day):
    dff = sva_df[sva_df['Date'].eq(day)][::-1]
    ax.clear()
    ax.barh(dff['County'], dff['Confirmed'])
    dx = dff['Confirmed'].max() / 200
    for i, (value, name) in enumerate(zip(dff['Confirmed'], dff['County'])):
        ax.text(value-dx, i,     name,           size=14, weight=600, ha='right', va='bottom')
        ax.text(value+dx, i,     f'{value:,.0f}',  size=14, ha='left',  va='center')
    # ... polished styles
    ax.text(1, 0.4, day, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)
    ax.text(0, 1.06, 'Confirmed Cases', transform=ax.transAxes, size=12, color='#777777')
    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))
    ax.xaxis.set_ticks_position('top')
    ax.tick_params(axis='x', colors='#777777', labelsize=12)
    ax.set_yticks([])
    ax.margins(0, 0.01)
    ax.grid(which='major', axis='x', linestyle='-')
    ax.set_axisbelow(True)
    ax.text(0, 1.12, 'Covid-19 Confirmed Cases NSVA Rank from March 1st.',
            transform=ax.transAxes, size=24, weight=600, ha='left')
    ax.text(1, 0, 'by @Tuoheng', transform=ax.transAxes, ha='right',
            color='#777777', bbox=dict(facecolor='white', alpha=0.8, edgecolor='white'))
    plt.box(False)

fig, ax = plt.subplots(figsize=(15, 8))
animator = animation.FuncAnimation(fig, draw_barchart, frames=data.Date.drop_duplicates())
HTML(animator.to_jshtml())

HTML(animator.to_html5_video())

