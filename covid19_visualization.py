# -*- coding: utf-8 -*-
"""Covid19_Visualization.ipynb

Automatically generated by Colaboratory.

"""

pip install chart-studio==1.0.0

from datetime import datetime
import numpy as np
import pandas as pd

import chart_studio.plotly as py
from plotly.graph_objs import *
from chart_studio.grid_objs import Grid, Column

mapbox_access_token = 'pk.eyJ1IjoiZmlzaGVlcCIsImEiOiJjazgwcXd5amIwMnRtM2ZwNDR5OHRjb2Q1In0.wUN67xk4G_3OYy9-tqoqgA'

confirmed = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv')
death = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv')
death

confirmed_state = confirmed.Province_State
death_state = death.Province_State

confirmed['county'] = confirmed.Combined_Key.map(lambda x : x.split(',')[0])
death['county'] = death.Combined_Key.map(lambda x : x.split(',')[0])

confirmed = confirmed.iloc[:, 8:]
death = death.iloc[:, 8:]
confirmed.insert(0, 'County', confirmed.county)
death.insert(0, 'County', death.county)
confirmed.drop(columns=['Combined_Key', 'county'], inplace=True)
death.drop(columns=['Combined_Key', 'county'], inplace=True)

confirmed.drop(confirmed.iloc[:, 3:42], inplace=True, axis=1)
death.drop(death.iloc[:, 3:42], inplace=True, axis=1)

confirmed.insert(loc=0, column='State', value=confirmed_state)
death.insert(loc=0, column='State', value=death_state)


confirmed = confirmed.melt(confirmed.columns[0:4])
death = death.melt(death.columns[0:5])

confirmed.columns = ['State', 'County', 'Lat', 'Long_', 'Date', 'Confirmed']
death.columns = ['State', 'County', 'Lat', 'Long_', 'Population', 'Date', 'Death']

data = pd.merge(confirmed, death, on=['County', 'Lat', 'Long_', 'Date'])
data.drop(columns=['Population'], inplace=True)
data = data[data.County != 'Unassigned']
data.reset_index(drop=True, inplace=True)

data.Date = pd.to_datetime(data.Date, format='%m/%d/%y')

data.drop(columns=['State_y'], inplace=True)

data

from sklearn.preprocessing import StandardScaler

sva_df = pd.DataFrame()

for day in data.Date.drop_duplicates():

    df = data[data.Date == day].iloc[:, -2:]
    norm_data = StandardScaler().fit_transform(df)
    norm_data2 = norm_data - np.min(norm_data)

    u,s,vt = np.linalg.svd(norm_data2, full_matrices=False)
    u_idx = np.argsort(u[:, 0])

    df_idx = df.iloc[u_idx[0:10], :].index
    df2 = data.iloc[df_idx,:]
    sva_df = pd.concat([sva_df, df2])

#sva_df.to_csv('Covid-19_SVA_daily_ranking.csv')

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import matplotlib.animation as animation
from IPython.display import HTML

current_day = '05/29/20'
dff = (sva_df[sva_df['Date'].eq(current_day)])
dff

fig, ax = plt.subplots(figsize=(15, 8))
ax.barh(dff['County'], dff['Confirmed'])

import matplotlib.pyplot as plt
import random

number_of_colors = len(data.State_x.drop_duplicates())

color = ["#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
             for i in range(number_of_colors)]
print(color)

colors = dict(zip(list(data.State_x.drop_duplicates()), color))
group_lk = data.set_index('County')['State_x'].to_dict()

fig, ax = plt.subplots(figsize=(15, 8))
dff = dff[::-1]   # flip values from top to bottom
# pass colors values to `color=`
ax.barh(dff['County'], dff['Confirmed'], color=[colors[group_lk[x]] for x in dff['County']])
# iterate over the values to plot labels and values (Tokyo, Asia, 38194.2)
for i, (value, name) in enumerate(zip(dff['Confirmed'], dff['County'])):
    ax.text(0, i,     name,            ha='right')  # Tokyo: name
    ax.text(value, i,     value,           ha='left')   # 38194.2: value
# Add year right middle portion of canvas
ax.text(1, 0.4, current_day, transform=ax.transAxes, size=46, ha='right')

fig, ax = plt.subplots(figsize=(15, 8))
def draw_barchart(day):
    dff = sva_df[sva_df['Date'].eq(day)][::-1]
    ax.clear()
    ax.barh(dff['County'], dff['Confirmed'])
    dx = dff['Confirmed'].max() / 200
    ax.barh(dff['County'], dff['Confirmed'], color=[colors[group_lk[x]] for x in dff['County']])

    for i, (value, name) in enumerate(zip(dff['Confirmed'], dff['County'])):
        ax.text(0, i,     name,           size=14, weight=600, ha='right', va='bottom')
        ax.text(value+dx, i,     f'{value:,.0f}',  size=14, ha='left',  va='center')
    # ... polished styles
    ax.text(1, 0.4, day, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)
    ax.text(0, 1.06, 'Confirmed Cases', transform=ax.transAxes, size=12, color='#777777')
    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))
    ax.xaxis.set_ticks_position('top')
    ax.tick_params(axis='x', colors='#777777', labelsize=12)
    ax.set_yticks([])
    ax.margins(0, 0.01)
    ax.grid(which='major', axis='x', linestyle='-')
    ax.set_axisbelow(True)
    ax.text(0, 1.12, 'Covid-19 Confirmed Cases NSVA Rank from March 1st.',
            transform=ax.transAxes, size=24, weight=600, ha='left')
    plt.box(False)
    
draw_barchart('05/29/20')

data.Date.drop_duplicates().astype(str)

import matplotlib.animation as animation
from IPython.display import HTML
fig, ax = plt.subplots(figsize=(15, 8))
animator = animation.FuncAnimation(fig, draw_barchart, frames=data.Date.drop_duplicates().astype(str))
HTML(animator.to_jshtml())

animator.save('Covid-19_NSVA_rank.mp4', fps=2, dpi=80)

